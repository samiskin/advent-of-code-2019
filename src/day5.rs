fn parse_opcode(num: i32) -> (i32, bool, bool, bool) {
    let de = num % 100;
    let c = (num / 100) % 10 == 1;
    let b = (num / 1000) % 10 == 1;
    let a = (num / 10000) % 10 == 1;
    (de, c, b, a)
}

pub fn run(program: &str) -> std::io::Result<String> {
    let mut numbers: Vec<i32> = program
        .trim_end()
        .split(",")
        .map(|s| s.parse::<i32>().unwrap())
        .collect();

    numbers.extend((0..1000).map(|_| 0));

    let mut done = false;
    let mut i = 0;

    let mut output = String::new();

    let get_val = |nums: &Vec<i32>, param: usize, mode: bool| -> i32 {
        if mode == false {
            nums[nums[param] as usize]
        } else {
            nums[param]
        }
    };

    while !done && i < numbers.len() {
        let (de, a, b, c) = parse_opcode(numbers[i]);
        // print!("{} {} {} {} {}\n", i, de, a, b, c);
        match de {
            1 => {
                let a = get_val(&numbers, i + 1, a);
                let b = get_val(&numbers, i + 2, b);
                let target = numbers[i + 3];
                numbers[target as usize] = a + b;
                i += 4;
            }
            2 => {
                let a = get_val(&numbers, i + 1, a);
                let b = get_val(&numbers, i + 2, b);
                let target = numbers[i + 3];
                numbers[target as usize] = a * b;
                i += 4;
            }
            3 => {
                let target = get_val(&numbers, i + 1, true);
                numbers[target as usize] = 5;
                i += 2;
            }
            4 => {
                output = output + &get_val(&numbers, i + 1, false).to_string();
                i += 2;
            }
            5 => {
                let index = get_val(&numbers, i + 1, a);
                if index != 0 {
                    i = get_val(&numbers, i + 2, b) as usize;
                } else {
                    i += 3;
                }
            }
            6 => {
                let index = get_val(&numbers, i + 1, a);
                if index == 0 {
                    i = get_val(&numbers, i + 2, b) as usize;
                } else {
                    i += 3;
                }
            }
            7 => {
                let a = get_val(&numbers, i + 1, a);
                let b = get_val(&numbers, i + 2, b);
                let target = numbers[i + 3];
                if a < b {
                    numbers[target as usize] = 1;
                } else {
                    numbers[target as usize] = 0;
                }
                i += 4;
            }
            8 => {
                let a = get_val(&numbers, i + 1, a);
                let b = get_val(&numbers, i + 2, b);
                let target = numbers[i + 3];
                if a == b {
                    numbers[target as usize] = 1;
                } else {
                    numbers[target as usize] = 0;
                }
                i += 4;
            }
            99 => {
                print!("Halting! {}\n", numbers[223]);
                done = true
            }
            _ => {
                print!("Unknown opcode {}", de);
                done = true;
            }
        }
    }
    print!("{}", output);
    Ok(output)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_day5_run() {
        let input =  "3,225,1,225,6,6,1100,1,238,225,104,0,1101,82,10,225,101,94,44,224,101,-165,224,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1102,35,77,225,1102,28,71,225,1102,16,36,225,102,51,196,224,101,-3468,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1001,48,21,224,101,-57,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,2,188,40,224,1001,224,-5390,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1101,9,32,224,101,-41,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1102,66,70,225,1002,191,28,224,101,-868,224,224,4,224,102,8,223,223,101,5,224,224,1,224,223,223,1,14,140,224,101,-80,224,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1102,79,70,225,1101,31,65,225,1101,11,68,225,1102,20,32,224,101,-640,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,226,224,1002,223,2,223,1006,224,329,101,1,223,223,1008,677,677,224,102,2,223,223,1006,224,344,101,1,223,223,1107,226,677,224,102,2,223,223,1005,224,359,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,374,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,389,1001,223,1,223,7,677,226,224,1002,223,2,223,1006,224,404,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,419,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,434,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,449,1001,223,1,223,107,226,677,224,1002,223,2,223,1005,224,464,1001,223,1,223,1007,677,677,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,1001,223,1,223,1108,226,677,224,102,2,223,223,1005,224,509,101,1,223,223,1008,677,226,224,102,2,223,223,1005,224,524,1001,223,1,223,1007,677,226,224,102,2,223,223,1005,224,539,101,1,223,223,1108,226,226,224,1002,223,2,223,1005,224,554,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,569,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,584,101,1,223,223,1107,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,614,1001,223,1,223,108,677,226,224,102,2,223,223,1006,224,629,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,644,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,659,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226";
        let output = run(&input).unwrap();
        assert_eq!(output, "8805067");
    }
}
